---
layout: post
title: "ModernWeb 2019"
date: 2019-09-18 09:37:00 +0800
comments: true
---

## 簡易重點

#### Day1
1. Progressive Deployment & NoDeploy - 曾義峰 Ant
    * NoDeploy == No conscious Deploy(無察覺部署)
    * ITIL -> DevOps-> SRE
    * 一切都在prodouction 完成(commit,測試,部署)
    * 適合工程師平均水準較高團隊
    * 漸進式部署，控制損壞範圍 (80% stable, 20% testing)
    * chaos engineering
    * 所有程式皆為部署，並可控制開關，減少整合問題
    * 提交程式至主幹可能會影響其他功能

<!--more-->  

2. 從單兵作戰到團隊領班：我所犯過的錯，你可以不必再犯 - Norman
    * 新手工程師常見的問題與錯誤

3. Google Maps 開始收費了該怎麼辦？ - 王慕羣 Kewang
    * POIBank 時所必備的工具
    * GeoJSON, GeoHash, OpenStreetMap
    * PostgreSQL 效能調校技巧

4. Abstract Thinking - 從 FP 看見程式之美 洪名辰 - Jerry
    * 抽象化就是把重複出現的模式或類似的事物作出歸納的過程
    * 有好的抽象化，有不好的抽象化 (抽壞可能比不抽糟糕)
    * 抽象化 是⼈人類⼤大腦運作的⽅方式
    * 有沒有一個系統性的方式來學習抽象化（Yes, Functional Programming）
    * FP 來來⾃自數學，數學是⼈人類抽象化最好的科學

5. 使用 Pentaho Kettle ETL 做系統資料後盾 - 范建銘 Freddy
    * 從多個來源收集資料， 並將其移至一或多個資料存放區
    * ETL (Extract, Transform, Load)
    * kettle DEMO
    * Job設定排程
    * job 可併行處理

#### Day2

1. The notion of design emergence：Evolving your software - Yeong Sheng, Tan
    * 理論學習曲線 vs 實際學習曲線
    * domain know how 學習曲線，如何影響開發週期
    * MAKE IT WORK -> MAKE IT RIGHT-> MAKE IT FAST (雛形開發、敏捷開發)
    * open source vs commercial software

2. 經營者需要學的第二火星語 vs 開發者需要學的第二火星語
    * 經營者需了解需求本身是否為特例或可找出特定模式的新功能
    * 開發者需了解經營者無法理解技術環節，且重視成本考量

3. 從零開始加入自動化資安測試 - YSc
    * DevSecOps: 在現有的 DevOps 開發文化中，加上自動化的資安測試
    * OWASP testing
    * 靜態測試（SAST）/ 動態測試（DAST）
    * CI/CD 每個階段不同的需求和做法

4. 資料庫自動化部署從 0 到 1 - 邱健哲 Ken
    * 資料庫自動化部署的優點與缺點
    * Model-Driven Approach 比較來源與目標資料庫差異在佈署
    * 避免使用 *
    * 欄位新增，次序最後

5. Data Visualization - Will
    * 基礎圖表使用方式與意義

6. 初學 Go 專案目錄結構與設計 - 吳柏毅 appleboy
    * Golang 開發工程師所需的所有基礎知識
    * 目錄結構與設計想法
    * Makefile （快速搭建開發環境）
    * Version （透過變數編譯產生程式版本號）
    * 實用套件介紹
    * Go test （撰寫測試案例的重要性)

## 應用

雖此次議程在後端議題雖不如預期，但依然有幾個部分是我們可以參考應用的。當前遊戲開發團隊致力於橫向拓展遊戲玩法種類與縱向系統效能整合，架構的重構或新架構的前期使用很適合漸進式部署，利用漸進式部署10%~20%的機群或合作業主能夠有效控制風險範圍，並且可搜集在正式環境的使用回饋持續改善系統體驗。

縱向系統效能整合，系統如需長時間經營維運，系統效能整合是需要持續觀察與調整的課題。本次議題 ”Abstract Thinking - 從 FP 看見程式之美“ 便是本次希望分享給組內同仁的良好思維。抽象化是一種程式撰寫技巧，沒有抽象化的程式可以運行，但抽象化後可增加程式的閱讀性、減少重複程式碼、減少抽換邏輯成本等優點，但其學習曲線較為陡峭，需憑藉過往累積經驗與技術的累積進行抽取，一般而言抽象工作會教付給較資深的工程師來進行。此次講者帶來一個可以減緩學習曲線的想法系統性的學習抽象化 － Functional Programming，兩個核心（Function Composition, Map）將幫助我們了解抽象化在成程式面試如何運行與流動。